{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#generic-state-hooks-for-react","title":"Generic State Hooks for React","text":""},{"location":"#about-the-library","title":"About the library","text":"<p><code>react-generic-state-hooks</code> has been created to provide a simple way for creating reusable data sources ready for use anywhere in the application. The library allows you to define hooks for reading and modifying the same data, regardless of where it is used.</p> <p>With that, you'll be able to calmly create your application and enjoy the creative process. It's all about making development smoother and more enjoyable.</p> <p>If you choose redux-way for creating hooks, you'll never have to create actions and reducers again. It will all be done for you.</p>"},{"location":"#types-of-hooks","title":"Types of hooks","text":"<p>The library provides three types of generic hooks dedicated for most common used data types like simple values, lists &amp; sets and records (maps):</p> <ul> <li><code>useValue</code>: basic hook for reading and storing any values</li> <li><code>useList</code>: hook dedicated to use with list and sets</li> <li><code>useRecord</code>: hook for managing record-like data structures like maps and key-value storages.</li> </ul>"},{"location":"#storing-data","title":"Storing Data","text":"<p><code>react-generic-state-hooks</code> provides three types of data storages:</p> <ul> <li><code>inMemory</code>: data is stored in the application's memory</li> <li><code>localStorage</code>: data is stored in local storage</li> <li><code>sessionStorage</code>: data is stored in session storage</li> <li><code>redux</code>: data is stored in Redux (not included in this library)</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p><code>npm install react-generic-state-hooks</code></p>"},{"location":"#basic-usage","title":"Basic usage:","text":"<p>First, We need to create generic hooks that we can later use directly in the application, or as a base for custom hooks.</p> <p>Each storage type has its own hooks creation function:</p> <ul> <li><code>createInMemoryStateHooks</code> for storing data in application memory</li> <li><code>createLocalStorageStateHooks</code> for storing data in local storage</li> <li><code>createSessionStorageStateHooks</code> for storing data in session storage</li> <li><code>createReduxStateHooks</code> for storing data in redux</li> </ul> <p>Examples:</p> inMemorylocal storagesession storageredux inMemoryStateHooks.ts<pre><code>import { createInMemoryStateHooks } from 'react-generic-state-hooks';\n\nexport const { useValue, useList, useRecord\n} = createInMemoryStateHooks('my-namespace');\n</code></pre> localStorageStateHooks.ts<pre><code>import { createLocalStorageStateHooks } from 'react-generic-state-hooks';\n\nexport const { useValue, useList, useRecord\n} = createLocalStorageStateHooks('my-namespace');\n</code></pre> sessionStorageStateHooks.ts<pre><code>import { createSessionStorageStateHooks } from 'react-generic-state-hooks';\n\nexport const { useValue, useList, useRecord\n} = createSessionStorageStateHooks('my-namespace');\n</code></pre> reduxStateHooks.ts<pre><code>import { createReduxStateHooks } from 'react-generic-state-hooks';\n\nexport const { slice, createSelector, createAction,\n  useValue, useList, useRecord\n} = createReduxStateHooks('my-namespace');\n\n// --------------------------------------------------------------\n// RootReducer: Connect generated \"slice.reducer\" to Redux store:\nimport { slice } from './ReduxGenericStateHooks';\n\nconst rootReducer = combineReducers({\n  [slice.name]: slice.reducer\n});\n\nexport { rootReducer };\n</code></pre> <p>That's all! Now, you can use generic hooks in any place of your application:</p> MyComponent.tsx<pre><code>import { useValue } from './inMemoryStateHooks';\n\nconst MyComponent = () =&gt; {\n  const [value, setValue] = useValue('counter', 0);\n  return (\n    &lt;&gt;\n      &lt;div&gt;count: {value}&lt;/div&gt;\n      &lt;button onClick={() =&gt; setValue(value + 1)}&gt;click me&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"#creating-custom-hooks","title":"Creating Custom Hooks","text":"<p>If you plan to use the same data in multiple places in the application, a better approach would be to create a dedicated hooks based on generic hooks: useCounter.ts<pre><code>import { useValue } from './inMemoryStateHooks';\n\nexport const useCounter = (initialValue: number = 0) =&gt; useValue('counter', initialValue);\n</code></pre> Just like generic hooks, you can use them in any place of your application: MyComponent.tsx<pre><code>import { useCounter } from './useCounter';\n\nconst MyComponent = () =&gt; {\n  const [value, setValue] = useCounter();\n  return (\n    &lt;&gt;\n      &lt;div&gt;count: {value}&lt;/div&gt;\n      &lt;button onClick={() =&gt; setValue(value + 1)}&gt;click me&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre></p>"}]}